1. Append
Method .append() dapat digunakan pada dataframe/series yang ditujukan untuk menambah row-nya saja. 
Jika di SQL memiliki 2 tabel atau lebih maka dapat menggabungkannya secara vertikal dengan Union. Jadi SQL Union ekuivalen dengan method .append() di Pandas.
                      s1 = pd.Series([1,2,3,4,5,6])
                      s2 = pd.Series(["a","b","c","d","e","f"])
                      # Terapkan method append
                      s2_append_s1= s2.append(s1)

2.Concat
Method .concat() dapat digunakan pada dataframe yang ditujukan untuk penggabungan baik dalam row-wise (dalam arah ) atau column-wise.
                          df1 = pd.DataFrame({'a':[1,2],
                                    'b':[3,4]})
                          df2 = pd.DataFrame({'b':[1,2],
                                    'a':[3,4]})
                          # Terapkan method concat row-wise
                          row_wise_concat = pd.concat([df1,df2])
                          
                          # Terapkan method concat column-wise
                          col_wise_concat = pd.concat([df1,df2], axis=1)
                          print("Column-wise - concat:\n", col_wise_concat)
                          
                          # Penambahan identifier --> membentuk hasil penggabungan multiindex
                          multiindex_concat = pd.concat([df1,df2], axis=0, keys=['df1','df2'])
                          print("Multiindex - concat:\n", multiindex_concat)
                         
 3.merge (index tunggal)
 Method .merge() untuk menggabungkan Series/Dataframe yang bentuknya mirip dengan syntax join di SQL, 
 specify left and right tables, join key dan how to join (left, right, inner, full outer).
 
                         df1 = pd.DataFrame({
                           'key':['k1','k2','k3','k4','k5'],
                           'val1':[200, 500, 0, 500, 100],
                           'val2':[30, 50, 100, 20, 10]
                        })
                        df2 = pd.DataFrame({
                           'key':['k1','k3','k5','k7','k10'],
                           'val3':[1,2,3,4,5],
                           'val4':[6,7,8,8,10]
                        })
                        # Merge yang ekivalen dengan SQL left join
                        merge_df_left = pd.merge(left=df1, right=df2, how='left', left_on='key', right_on='key')           ------- how= right/left/inner/outer
                        print('Merge - Left:\n', merge_df_left)
                       
                       
 merge (multiindex)
                         df1 = pd.DataFrame({
                           'key':['k1','k2','k3','k4','k5'],
                           'val1':[200, 500, 0, 500, 100],
                           'val2':[30, 50, 100, 20, 10]
                        }).set_index(['key','val2'])
                        print('Dataframe 1:\n', df1)
                        df2 = pd.DataFrame({
                           'key':['k1','k3','k5','k7','k10'],
                           'val3':[1,2,3,4,5],
                           'val4':[6,7,8,8,10]
                        }).set_index(['key','val3'])
                        print('Dataframe 2:\n', df2)
                        
                        # Merge dataframe yang memiliki multi index
                        df_merge = pd.merge(df1.reset_index(),df2.reset_index())
                        print('Merging dataframe:\n', df_merge)
 
 4.Join
      Metthod .join() digunakan pada dataframe untuk menggabungkan kedua data dengan set index pada kedua tabel tersebut sebagai join key, 
      tanpa index, hal ini tidak akan berhasil.
 
                           df1 = pd.DataFrame({
                             'key':['k1','k2','k3','k4','k5'],
                             'val1':[200, 500, 0, 500, 100],
                             'val2':[30, 50, 100, 20, 10]
                          })
                          df2 = pd.DataFrame({
                             'key':['k1','k3','k5','k7','k10'],
                             'val3':[1,2,3,4,5],
                             'val4':[6,7,8,8,10]
                          })
                          # Penerapan join dengan menggunakan set_index dan keyword how
                          join_df = df1.set_index('key').join(df2.set_index('key'), how='outer')
                          print(join_df)
                          
5.
 
 
 
                        
   
